@model ClothBazar.Web.ViewModel.CategorySearchViewModel
@{
    ViewBag.Title = "CategoryTable";
}

<!--New Category create form-->
<div class="my-4">
    <form method="post">
        <div class="row">
            <div class="col-md-12">
                <div class="form-group">
                    <button type="button" id="btnNewCategory"> New </button>
                </div>
            </div>
        </div>
    </form>
</div>

<div class="title-section">
    <h2 class="title">
        Category
    </h2>
</div>

<div>
    <table class="table table-striped">
        <thead>
            <tr>
                <td> Name </td>
                <td> Description </td>
                <td> Products </td>
                <td> Actions </td>
            </tr>
        </thead>
        <tbody>
            @if (Model.Categories != null && Model.Categories.Count > 0)
            {
                foreach (var category in Model.Categories)
                {
                    <tr>
                        <td> @category.Name </td>
                        <td> @category.Description </td>
                        <td> @category.Products.Count </td>
                        <td>
                            <button type="button" class="editBtn" data-id="@category.ID">Edit</button>
                            <button type="button" class="deleteBtn" data-id="@category.ID">Delete</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr><td colspan="3" class="text-danger"> No Categories Found </td></tr>
            }

        </tbody>

    </table>
    <div>
        @if (Model.Pager != null)
        {

            if (Model.Pager.CurrentPage > 1)
            {
                <button class="btnPagination" data-PageNo="@(Model.Pager.CurrentPage - 1)"> Previous </button>
                <button class="btnPagination" data-PageNo="1"> First </button>
            }

            for (var page = Model.Pager.StartPage; page <= Model.Pager.TotalPages; page++)
            {
                string activeClass = Model.Pager.CurrentPage == page ? "active bg-info" : string.Empty;
                <button class="btnPagination @activeClass" data-PageNo="@page">@page</button>
            }

            if (Model.Pager.CurrentPage < Model.Pager.TotalPages)
            {
                <button class="btnPagination" data-PageNo="@Model.Pager.EndPage"> Last </button>
                <button class="btnPagination" data-PageNo="@(Model.Pager.CurrentPage + 1)"> Next </button>
            }
        }
    </div>



</div>

<script>
    $(".btnPagination").click(function () { // select element by id

        $.ajax({ // start ajax function
            url: '/Category/CategoryTable', // path for which action method wants to call
            data: {
                pageNo: $(this).attr("data-PageNo") // put any data from current view
            }
        })
            .done(function (response) { // if task is completed then this piece of code runs
                $("#categoryTableCont").html(response);
            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) { // if task is failed then this piece of code runs
                alert("Fail");
            });
    });

    $(".editBtn").click(function () {
        //debugger;
        $.ajax({
            type: 'GET',
            url: '/Category/Edit',
            data: {
                ID: $(this).attr('data-id')
            }
        })
            .done(function (response) {
                $("#categoryActionCont").html(response);
                focusAction("categoryActionCont");
            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Fail");
            });
    });

    $(".deleteBtn").click(function () {

        swal({
            title: "Confirm?",
            text: "Are you sure want to delete this product.",
            icon: "warning",
            buttons: true,
            dangerMode: true,
        })
            .then((willDelete) => {
                if (willDelete) {
                    $.ajax({
                        type: 'POST',
                        url: '/Category/Delete',
                        data: {
                            ID: $(this).attr('data-id') // define custom attribute for using unique value in foreach loop
                        }
                    })
                        .done(function (response) {
                            $("#categoryTableCont").html(response);
                            swal("Record has been Deleted.", {
                                icon: "success",
                            });
                        })
                        .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                            alert("Fail");
                        });


                }
            });
    });

    $("#btnNewCategory").click(function () {

        $.ajax({
            type: 'GET',
            url: "/Category/Create",
        })
            .done(function (response) {
                console.log(response);
                $("#categoryActionCont").html(response);
                focusAction("categoryActionCont");
            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Fail");
            });
    });



</script>